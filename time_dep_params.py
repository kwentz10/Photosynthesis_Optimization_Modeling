#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue May 23 11:15:33 2017

@author: Katherine
"""

import numpy as np
import math
from matplotlib import pyplot as plt
from scipy.interpolate import interp1d
from scipy.signal import savgol_filter
import numpy as np
from photo_functions import gs_smooth


#2012 hot dry year
#2013 dry up until right before the growing season


#beginning of growing season lengths for dry and wet meadow in different years (2012 and 2013)
gs0_d=111 #129 2012 dry meadow

gs0_w=144 #151

gs0_m=127

gs0_ddy=80

gs0_wdy=114



#end of the growing season is the same for all plant communities
gsf=238

#--------calculate growing degree days in dry year--------#
#mylist=[]
#for x in range(len(minairtemp_dy)):
#    if (((maxairtemp_dy[x]+minairtemp_dy[x])/2)-10)<0.0:
#        mylist+=[0.0]
#    elif math.isnan((((maxairtemp_dy[x]+minairtemp_dy[x])/2)-10)):
#        mylist+=[0.0]
#    else:
#        mylist+=[((maxairtemp_dy[x]+minairtemp_dy[x])/2)-10]
#GDD_dy=sum(mylist)
#--------------------------#




#REGULAR GROWING SEASON INPUTS

#2013 Temperatures (normal year)
 
#max air temp (E)
#maxairtemp=[-16.01,-16.41,-5.536,1.983,-6.202,1.652,1.355,-5.838,2.918,0.116,-5.85,-19.42,-17.38,-18.45,-8.59,-3.785,
#2.74,-5.022,-3.172,-4.839,-5.044,-2.208,2.466,-1.612,-2.289,1.265,-2.692,-1.819,-15.75,-12.16,-10.33,-9.1,-4.67,-3.719,
#-7.246,-1.606,-3.714,-2.466,0.538,-4.72,-11.37,-7.195,-10.28,-11.06,-9.16,-12.55,-6.88,-3.743,-11.17,-0.631,-2.432,-3.346,
#-8.65,-6.814,-13.04,-7.079,-10.04,-12.84,-11.99,-7.524,-3.079,-2.07,-5.702,-3.87,2.103,4.417,2.235,-5.997,-6.468,-7.057,
#-5.429,-1.825,2.653,3.455,-0.962,-4.652,-10.14,-7.765,-2.499,-2.772,-5.497,-13.79,-17.22,-7.731,-3.426,-0.915,3.977,1.949,
#0.184,0.72,3.193,-0.279,0.192,3.488,4.15,-0.531,-2.049,2.886,-8.62,-8.58,-3.693,-1.572,-0.354,-6.645,-4.758,-1.172,-6.337,
#-13.95,-6.752,-0.048,-2.587,-0.017,-5.96,-5.844,3.892,7.644,4.269,7.313,7.501,8.31,-5.691,-5.832,3.178,0.579,7.932,6.139,
#5.851,1.001,5.95,7.48,5.167,8.8,14.94,14.52,12.76,8.54,12.33,6.549,1.225,1.123,4.222,10.51,9.12,11.36,12.43,13.06,10.27,
#10.12,2.333,0.898,1.341,6.957,13.31,12.56,11.87,9.92,11.36,13.38,11.46,16.6,19.92,17.4,17.9,17.36,16.19,14.93,12.75,13.88,
#14.83,18.26,14.4,17.02,14.99,13.84,15.69,14.89,19.27,21.02,21.78,17.2,15.42,12.19,13.69,15.52,16.01,15.44,15.94,17.86,16.47,
#19.7,18.97,21.47,17.1,16.96,15.19,14.47,14.28,17.73,17.51,14.47,18.37,18.83,19,20.46,18.08,12.53,14.59,16.94,12.39,12.09,15.3,
#17.64,17.38,17.55,17.27,17.88,17.3,16.01,12.75,13.17,10.43,16.48,13.26,12.97,11.07,13.9,16.56,17.69,19,19.21,18.55,19.94,19.56,
#17,15.96,14.99,15.96,17.71,16.95,18.39,18.4,18.59,17.81,15.3,17.68,20.11,17.72,18.25,18.16,17.96,16.83,13.66,8,8.38,9.18,11.67,
#11.86,6.02,11.91,14.33,11.58,7.859,12.35,13.65,10.03,0.666,8.95,14.02,10.86,5.395,2.741,7.705,12.25,12.2,11.75,10.37,-0.673,
#-1.096,5.395,10.81,12,7.343,3.197,-1.402,4.116,7.149,2.619,-2.138,-4.918,-2.54,-6.731,-2.147,-3.22,-2.474,3.551,6.001,8.81,
#8.46,5.436,3.629,3.929,3.437,-5.328,-7.064,-6.11,4.01,2.598,-2.536,-6.065,-8.59,0.674,0.565,3.314,2.566,2.936,6.157,2.402,
#-1.251,0.51,-4.987,-7.098,1.562,-1.05,-0.907,-2.043,-3.107,-2.915,-1.274,-3.075,-5.085,-0.054,5.167,-2.13,-1.675,-6.088,
#-4.674,-4.776,-10.97,-14.76,-19.21,-12.23,-16.39,-18.39,-11.23,-5.453,0.834,-4.864,-8.21,-6.047,-2.909,-0.973,0.537,-0.476,
#-8.06,-10.04,-13.47,-8.02,-6.934,-6.907,-3.168,6.631,-1.939,-11.25,-8.69,-6.417]

#2014 Temperatures (normal year)
maxairtemp=[-7.459,
-5.408,
-3.503,
-7.683,
-20.5,
-9.02,
-4.48,
-8.29,
-8.63,
-11.9,
-3.081,
-4.23,
-10.78,
-10.72,
-7.004,
-8.79,
-6.161,
-2.115,
-1.947,
-5.317,
-2.789,
-0.195,
-5.066,
-1.266,
-0.007,
-5.26,
-9.29,
-14.8,
-5.003,
-4.219,
-7.899,
-12.49,
-4.407,
-9.78,
-7.183,
-16.92,
-13.05,
-9.86,
-6.252,
-4.042,
-3.639,
-8.67,
-6.779,
-3.443,
-3.794,
-2.534,
-0.559,
-1.606,
-3.702,
-2.662,
-14.84,
-10.54,
-8.43,
-5.145,
-3.001,
-2.316,
-5.411,
-1.572,
-3.717,
-2.751,
-3.147,
-3.529,
-0.551,
-5.884,
0.428,
-3.574,
-2.125,
-0.619,
2.172,
-2.644,
2.269,
-4.341,
-0.917,
-6.792,
-3.119,
2.009,
-8.61,
-6.926,
-1.709,
-0.488,
-2.043,
-5.736,
-6.133,
3.537,
0.728,
-5.567,
-7.901,
-2.083,
3.383,
-6.821,
-3.159,
-3.491,
-4.72,
-2.655,
2.26,
-4.992,
-5.447,
0.766,
5.85,
3.232,
6.612,
6.633,
-2.53,
-10.55,
-2.402,
-2.198,
1.704,
7.656,
5.767,
5.619,
6.833,
8.05,
3.42,
0.442,
6.554,
7.295,
-3.924,
-7.416,
-7.427,
-2.892,
-0.748,
5.019,
9.15,
8.53,
8.77,
9.29,
4.014,
0.538,
0.717,
3.349,
-1.211,
-3.776,
0.756,
-2.981,
1.054,
4.766,
7.807,
12,
11.64,
9.36,
7.777,
11.86,
10.7,
8.11,
5.257,
7.737,
11.09,
14.72,
13.23,
8.84,
11.82,
10.15,
13.53,
13.64,
13.44,
14.42,
13.07,
12.11,
9.39,
8.28,
11.7,
11.71,
12.54,
14.64,
10.43,
9.16,
13.77,
14.09,
11.55,
10.93,
15.32,
14.96,
12.08,
14.01,
13.91,
16.76,
16.55,
10.85,
10.34,
17.13,
15.37,
10.95,
12.67,
17,
16.55,
18.08,
17.95,
19.53,
14.52,
19.14,
17.74,
18.29,
16.66,
13.79,
13.74,
16.39,
14.09,
11.45,
15.33,
17.89,
20.5,
18.48,
20.02,
20.19,
18.26,
18.05,
19.35,
15.77,
16.35,
14.83,
6.687,
8.53,
10.2,
13.87,
15.94,
14.9,
13.97,
14.35,
14.04,
15.25,
14.44,
11.21,
13,
16.96,
16.72,
15.47,
16.57,
16.93,
17.79,
17.8,
15.11,
14.19,
14.66,
9.77,
10.43,
11,
12.39,
13.95,
10.94,
5.785,
11.8,
14.68,
8.88,
10.56,
15.36,
17.34,
16.28,
12.91,
13.6,
12.68,
13.65,
9.43,
9.04,
10.17,
8.76,
12.02,
14.42,
15.56,
15.25,
16.68,
16.85,
17.95,
16.51,
14.63,
9.85,
8.23,
15.49,
17.78,
18.37,
16.22,
10.65,
5.997,
1.903,
1.511,
-2.541,
1.304,
4.547,
4.828,
8.47,
11.09,
12.4,
4.021,
3.605,
4.184,
0.938,
-2.718,
8.65,
12.72,
9.78,
9.69,
10.9,
10.34,
11.37,
9.47,
3.508,
6.565,
11.21,
13.41,
8.24,
0.653,
-2.109,
1.823,
5.479,
7.903,
8.79,
3.441,
-2.517,
2.001,
4.29,
6.134,
2.552,
2.633,
4.016,
0.116,
-8.17,
-10.21,
-7.07,
-5.831,
-6.744,
-14.85,
-14.95,
-10.22,
-6.582,
-1.266,
-3.983,
-1.518,
-7.03,
-13.27,
-6.888,
-4.594,
-0.901,
2.581,
0.164,
-2.514,
-5.167,
-0.79,
0.344,
-1.926,
-3.41,
-0.371,
-4.307,
0.817,
1.336,
3.076,
2.741,
8.52,
3.965,
-5.803,
-9.16,
-2.208,
-3.373,
-7.8,
-7.405,
-6.36,
-5.616,
-8.3,
-13.98,
-5.663,
-5.513,
-11.12,
-14.19,
-13.57,
-16.91,
-15.98,
-8.08]

#min air temp
airtemp_min=[-20.39,-20.02,-21.45,-11.19,-10.55,-8.86,-8.65,-11.21,-7.335,-6.78,-22.96,-24.65,-25.4,-24.85,-25.09,-11.22,
-8.64,-8.45,-9.52,-10.59,-10.95,-7.745,-3.887,-5.928,-6.286,-6.218,-7.367,-16.16,-21.87,-21.93,-12.64,-12.04,-12.24,-10.1,
-10.91,-9.88,-11.97,-14.07,-9.82,-15.57,-18.53,-20.09,-20.29,-16.05,-14.72,-16.07,-13.27,-14.88,-17.79,-13.52,-14.78,-15.34,
-18.08,-18.15,-19.04,-17.53,-17.04,-19.55,-18.12,-13.98,-8.88,-6.292,-18.36,-17.64,-7.123,-6.917,-7.359,-17.01,-17,-11.92,
-9.3,-7.263,-4.806,-2.768,-6.95,-15.2,-11.68,-12.97,-11.9,-13.5,-16.19,-22.01,-20.7,-20.75,-14.17,-7.394,-6.271,-4.822,-6.644,
-7.311,-7.744,-7.086,-10.41,-5.457,-6.247,-7.899,-7.359,-9.78,-20.19,-15.6,-12.51,-8.28,-8.91,-14.65,-13.45,-14.02,-21.43,
-20.4,-14.63,-8.28,-8.86,-16.6,-17.78,-14.34,-9.31,-5.963,-4.966,-1.088,-1.79,-6.213,-16.65,-18.65,-9.44,-8.51,-7.109,-3.65,
-3.342,-3.695,-7.563,-7.086,-5.453,-1.381,3.639,3.214,1.617,1.156,3.217,-2.891,-3.865,-4.547,-5.999,-1.51,-0.328,3.401,4.023,
4.104,2.454,1.448,-3.695,-4.602,-5.583,-3.983,-0.748,3.61,0.592,-1.542,1.736,1.331,1.876,4.168,10.06,7.716,6.679,7.275,5.123,
4.784,4.619,4.189,3.397,3.726,6.027,5.762,4.913,2.31,5.003,5.377,7.53,8.59,7.93,6.935,4.682,3.508,3.44,4.614,6.865,6.661,5.023,
6.671,6.687,9.32,6.222,8.88,8.95,8.2,7.435,6.381,3.709,5.278,7.936,7.63,7.189,9.63,9.12,8.13,5.177,4.813,4.58,6.202,6.034,
4.667,5.804,5.578,6.875,8.11,5.644,7.846,7.292,7.394,4.92,3.006,3.081,4.32,4.731,3.273,3.515,3.149,5.788,5.694,5.788,8.39,
9.03,9.32,7.053,6.985,6.989,7.181,7.774,8.88,8.73,7.97,8.35,9.57,5.924,5.686,8.81,9.45,8.46,8.57,8.04,7.566,8.24,5.581,5.699,
5.631,5.053,5.071,2.571,1.838,2.567,5.053,2.148,-0.367,-1.346,5.615,-0.048,-3.287,-1.028,4.388,3.083,-8.63,-8.82,-0.056,2.742,
2.877,0.958,-0.877,-12.41,-12.32,-2.287,1.754,2.093,-0.871,-5.532,-5.351,-6.434,-1.62,-7.189,-9.6,-10.34,-8.62,-11.9,-9.29,-8.78,
-9.42,-4.922,-1.4,-1.004,-4.566,-6.349,-2.598,-4.054,-5.59,-10.39,-11.05,-8.56,-7.771,-11.83,-12.19,-16.47,-16.09,-9.09,-3.615,
-3.845,-2.559,-4.162,-8.85,-4.082,-7.16,-8.58,-10.84,-12.64,-8.22,-5.51,-7.369,-16.06,-15.07,-12.33,-7.779,-10.88,-10.59,-7.698,
-6.995,-6.935,-7.971,-9.56,-6.886,-11.51,-23.6,-23.29,-22.79,-19.41,-23.09,-26.39,-19.99,-15.4,-7.665,-13.31,-14.76,-11.73,
-6.882,-6.894,-4.261,-8.79,-13.69,-16.55,-17.36,-14.08,-15.93,-16.5,-10.01,-6.254,-14.56,-15.54,-14,-9.5]

#correct for differences in microclimate

#surface temp dry meadow
surtemp_dm=np.array(maxairtemp)+2.5

#surface temp moist meadow
surtemp_mm=np.array(maxairtemp)

#surface temp wet meadow
surtemp_wm=np.array(maxairtemp)-2.5



#2013 Soil Moisture (normal year) 
vwc_dm=[0.05757495666666665, 0.05667111552083334, 0.05608606177083335, 0.05717884375000001, 0.05755306354166667, 0.05744374572916666, 0.05852066760416667, 0.05818133859929077, 0.05916810916666668, 0.05861398520833333, 0.05725713531250001, 0.055025587291666664, 0.05382138947916664, 0.05344066124999998, 0.05308620114583332, 0.05449405927083335, 0.05637180572916667, 0.05730695125, 0.057289320937499985, 0.05742060385416666, 0.05685217510416666, 0.05690386021276593, 0.05749458635416667, 0.05806204520833333, 0.05819149760416667, 0.05910217979166668, 0.06022070833333333, 0.058846188541666664, 0.057509959791666655, 0.055322614583333346, 0.05538367916666667, 0.05573282927083335, 0.05597637260416666, 0.056624667187500005, 0.05637642072916668, 0.057565780937500005, 0.05889057625, 0.05893545041666666, 0.05935372708333335, 0.05876652989583332, 0.05742777208333334, 0.057144071145833336, 0.05654414687499999, 0.05639405614583334, 0.056628352916666666, 0.05671253406250004, 0.056819901666666686, 0.05720067677083332, 0.05665275187499999, 0.057258968333333334, 0.05843804156250001, 0.05879554562499999, 0.05770369645833334, 0.056705476875, 0.05703076572916668, 0.05734647552083334, 0.057307286562500004, 0.05679912541666667, 0.05623428020833334, 0.05667666854166667, 0.057824019062499996, 0.05903000781250001, 0.05936603979166668, 0.058394680416666664, 0.06133229052083334, 0.064331513125, 0.06247729635416667, 0.06074114708333334, 0.059581019895833344, 0.05885495854166668, 0.059117536875000015, 0.059757054062499995, 0.06254291281249999, 0.06745969260416666, 0.06703240177083333, 0.06340521072916669, 0.06086207812500001, 0.05982725520833333, 0.0594846953125, 0.06076112770833333, 0.06103835041666666, 0.06252154593750002, 0.06112147677083334, 0.05861587306737588, 0.05891113614583333, 0.06127708708333335, 0.06381500916666666, 0.06919102760416666, 0.0753345855208333, 0.07731975114583332, 0.07931629083333333, 0.08273935729166668, 0.08683814479166667, 0.09382472395833331, 0.09193736458333336, 0.09183609479166664, 0.09180222708333331, 0.09095052812500001, 0.09101308854166665, 0.08892761354166667, 0.08596731354166669, 0.08631228020833338, 0.08592550312500002, 0.08618848124999995, 0.08565652083333339, 0.085848925, 0.08628005709219855, 0.08653233645833339, 0.08417655833333336, 0.08504552291666669, 0.08687893645833333, 0.08773933645833337, 0.08761341666666667, 0.08683972812499999, 0.08626124166666667, 0.09793449687500003, 0.10165403645833335, 0.09759410906249999, 0.10373386249999998, 0.10970492916666669, 0.10914813333333334, 0.10723330312500001, 0.10408571666666669, 0.11311518854166666, 0.11649483333333333, 0.14472426666666668, 0.15311653229166666, 0.14636928854166664, 0.14362047925531907, 0.1413678427083333, 0.139618075, 0.15207650937499997, 0.19264083958333333, 0.2697206135416667, 0.30013701249999997, 0.2424625125, 0.22919226979166674, 0.2183261875000001, 0.21352002291666666, 0.21922469062499997, 0.22471822187499996, 0.21615714583333334, 0.21102632187499998, 0.1926806395833334, 0.1827336989583333, 0.17673018958333334, 0.1730140114583334, 0.1698977010416667, 0.1703957468750001, 0.17263244791666676, 0.16618665031249996, 0.1596801577083334, 0.162131753125, 0.15913489427083327, 0.15674519677083337, 0.15818398177083337, 0.1532559573958334, 0.15207427427083328, 0.14998375218749993, 0.14853996364583336, 0.14502497718750001, 0.14177338729166672, 0.13843633708333333, 0.13656014822916668, 0.13431153812500002, 0.13253947937500002, 0.13123555843749998, 0.13308665672619047, -499.45865855760417, -499.4592710198958, 0.1035544769791667, 0.10269098885416666, 0.09958406114583336, 0.09819233979166672, 0.09680398156250003, 0.094275848125, 0.09167634322916665, 0.08765425874999996, 0.0845117907291667, 0.10227271520833328, 0.10495766729166664, 0.11145979916666668, 0.11448283739583333, 0.11493657114583335, 0.11896146864583332, 0.12103702260416663, 0.1328716857291667, 0.12868463739583327, 0.12680188447916668, 0.11936553677083332, 0.11440268156250002, 0.11071978510416662, 0.11457760062499994, 0.12994121958333332, 0.14207909374999997, 0.15478173854166666, 0.14031837604166672, 0.13276602104166665, 0.13284277489583332, 0.1385959775, 0.13065181979166665, 0.125685344375, 0.11982513791666663, 0.11477350843750003, 0.11296983531250002, 0.1235914626041667, 0.12435095083333325, 0.12169998677083328, 0.12852290947916672, 0.12502474808510639, 0.12320531572916668, 0.1172837579166667, 0.11445315166666667, 0.11131665625000003, 0.10823440552083333, 0.11136657708333336, 0.11264311843750004, 0.11501382458333337, 0.10892723135416661, 0.10786624884057969, 0.11202585041666666, 0.1106524803125, 0.10818059260416668, 0.11423316343750003, 0.1369683864583334, 0.13488298770833332, 0.1246720997916666, 0.11879311145833335, 0.11460002979166663, 0.11090986062500005, 0.10984555239583335, 0.1059239405208333, 0.10332293916666663, 0.10280564354166669, 0.11681981031249998, 0.11765675843749995, 0.1259893491134752, 0.12518150781250006, 0.13126466052083327, 0.12628951052083337, 0.1236208396875, 0.13710495885416665, 0.13596298635416665, 0.13228530000000005, 0.12915966114583335, 0.12338621656249996, 0.12150302593749995, 0.12260351822916672, 0.12826274739583338, 0.14521177395833337, 0.13325571166666672, 0.14409781072916666, 0.17506181875000001, 0.18114283125000002, 0.19022241250000002, 0.1791932822916667, 0.15910514687500002, 0.17263071458333334, 0.1613844946808511, 0.14873089375000004, 0.15441989572916665, 0.1551895760416667, 0.14722989072916667, 0.14117050322916663, 0.1445642665625, 0.16076614895833335, 0.14807917916666669, 0.14174512593749994, 0.1365719096875, 0.13891282114583337, 0.1425924329166667, 0.13970093479166668, 0.13540552749999998, 0.13314444875, 0.13041837687500002, 0.12912526447916664, 0.13959446550724636, 0.13406758416666661, 0.12904761645833332, 0.13436997385416663, 0.1312782314583333, 0.12923650697916672, 0.128868155625, 0.13047782854166667, 0.13284912760416664, 0.1330944163541666, 0.1341797030208333, 0.13265140854166668, 0.13426989593750008, 0.12584259291666666, 0.1233868820833334, 0.11807064458333327, 0.11493564937499998, 0.11443451677083336, 0.11949688927083332, 0.12479273187500001, 0.12588663500000008, 0.1289814136458333, 0.1286150873958333, 0.12766332145833334, 0.12534077906250005, 0.12240361333333338, 0.12288544895833331, 0.11666867385416667, 0.11295508552083333, 0.10740254958333334, 0.10155651791666663, 0.09476651750000002, 0.08405837354166668, 0.0716952059375, 0.07222870187500001, 0.07289007250000001, 0.07348016979166672, 0.07626511562500002, 0.07706440239583334, 0.07777695072916668, 0.07776995854166667, 0.07478104781250003, 0.07161470000000002, 0.07173751083333335, 0.07130948541666668, 0.07057306989583334, 0.07050797729166669, 0.07145242885416668, 0.07202203604166665, 0.07186966906250002, 0.07204181302083336, 0.07317703656250002, 0.07385947083333337, 0.07281060312500001, 0.07120061885416668, 0.07055501093750001, 0.07072268260416667, 0.07035121864583335, 0.06942971968750003, 0.06989845049957485, 0.07059070934175535, 0.07153277552083334, 0.068799754375, 0.06536053041666665, 0.06437005249999998, 0.06425671062499996, 0.06269788052083332, 0.06246886593750001, 0.06314355989583331, 0.06421994031914893, 0.06423421812499999, 0.06351496302083331, 0.06373555072916667, 0.06436590302083331, 0.06493120625, 0.06573293843749999, 0.06621890281250001, 0.06566825989583336, 0.06476364864583331, 0.06407836510416667, 0.06389305499999999, 0.06433151479166667, 0.06386494052083333, 0.06393746177083331, 0.06558805260416667, 0.06738305052083332, 0.06698980729166665, 0.06578048572916667, 0.06583851]
 
vwc_mm=[0.040931874999999986, 0.04000687499999998, 0.03918520833333334, 0.04052666666666667, 0.04055416666666666, 0.040385625, 0.041710624999999994, 0.04129479166666666, 0.04250604166666669, 0.04172854166666667, 0.04051041666666667, 0.03815770833333334, 0.036612499999999965, 0.03594833333333331, 0.03546854166666665, 0.03704437500000001, 0.03953645833333332, 0.04055374999999999, 0.04051041666666665, 0.04059854166666667, 0.03983041666666666, 0.039741249999999985, 0.04056354166666667, 0.04127729166666667, 0.04205604166666666, 0.043462499999999994, 0.04503500000000001, 0.043530416666666676, 0.041904374999999994, 0.038936666666666696, 0.03854729166666669, 0.03881250000000005, 0.039025, 0.039432083333333326, 0.03901666666666669, 0.040907500000000006, 0.04278020833333332, 0.04294833333333334, 0.04402645833333336, 0.043257083333333335, 0.04191458333333334, 0.04133062499999999, 0.040492083333333324, 0.040202708333333344, 0.04028937499999999, 0.040335833333333355, 0.040500625, 0.040979166666666664, 0.04063416666666666, 0.042118541666666676, 0.04326645833333334, 0.04329145833333334, 0.04193229166666667, 0.04077499999999999, 0.040985, 0.041480625, 0.04130249999999999, 0.0405725, 0.039883958333333344, 0.04023520833333333, 0.04155958333333334, 0.04314291666666666, 0.043655416666666697, 0.042674374999999994, 0.047428958333333354, 0.05141500000000001, 0.049081875000000004, 0.04664208333333336, 0.045149166666666685, 0.04434479166666667, 0.04467270833333336, 0.04549437500000001, 0.04923187499999998, 0.05416270833333334, 0.053261041666666675, 0.05002729166666667, 0.04658687500000002, 0.045149375, 0.044581875000000014, 0.0463075, 0.04704, 0.048708125, 0.046721875000000024, 0.04261229166666667, 0.04283395833333334, 0.04617416666666668, 0.048939999999999984, 0.05068083333333332, 0.05362333333333331, 0.05453375000000001, 0.056346875, 0.06018979166666665, 0.059579166666666704, 0.0580339583333333, 0.05793666666666669, 0.05767166666666665, 0.05801562499999999, 0.056530625000000036, 0.056258124999999985, 0.05438333333333334, 0.05084895833333333, 0.051035000000000004, 0.05027375, 0.05013312499999997, 0.049532083333333386, 0.05002666666666666, 0.050498333333333305, 0.05083937500000003, 0.04817958333333335, 0.04976104166666669, 0.05193562499999999, 0.05290958333333337, 0.05228020833333335, 0.050894374999999964, 0.05060937499999999, 0.06595187500000001, 0.07763520833333334, 0.08363604166666666, 0.09173958333333333, 0.10039187500000002, 0.10182270833333334, 0.09902166666666667, 0.09704250000000002, 0.10515479166666668, 0.11259499999999999, 0.1306416666666667, 0.14255500000000002, 0.1431641666666666, 0.1407962499999999, 0.14007291666666669, 0.13928479166666666, 0.1430402083333333, 0.16208625, 0.1896922916666667, 0.2084991666666667, 0.22645624999999994, 0.24906250000000008, 0.24731166666666682, 0.243759375, 0.2453320833333333, 0.24535874999999988, 0.24433479166666663, 0.24488270833333328, 0.24175416666666674, 0.23766229166666666, 0.23532937500000006, 0.23388833333333348, 0.23178604166666675, 0.2314677083333335, 0.2317500000000002, 0.2280916666666666, 0.22098625000000013, 0.21982749999999998, 0.21738937499999988, 0.2148875000000001, 0.21322604166666673, 0.21039833333333346, 0.20872083333333324, 0.2066258333333332, 0.20422208333333336, 0.1992991666666667, 0.1948627083333334, 0.19012583333333336, 0.18726374999999998, 0.18442583333333337, 0.18146583333333335, 0.17986604166666667, 0.18082571428571428, -999, -999, 0.12931250000000005, 0.12921875000000002, 0.12579583333333338, 0.12377291666666673, 0.12168125000000006, 0.1182291666666667, 0.11469583333333333, 0.10840416666666658, 0.10405625000000007, 0.10854166666666659, 0.11328958333333329, 0.12276250000000001, 0.13014166666666663, 0.13251875, 0.13737916666666664, 0.14306458333333327, 0.15935833333333338, 0.15897291666666657, 0.15631875000000003, 0.14910208333333333, 0.14335833333333337, 0.13823749999999993, 0.13991041666666656, 0.15581249999999994, 0.17279583333333326, 0.1841625, 0.17472500000000013, 0.16829999999999998, 0.16894166666666666, 0.17144583333333333, 0.16563541666666662, 0.16046458333333338, 0.15447916666666658, 0.14795625000000004, 0.14508541666666672, 0.1511020833333334, 0.15316874999999985, 0.15176874999999992, 0.1557604166666667, 0.1547875, 0.15257708333333336, 0.1482708333333334, 0.14488333333333336, 0.14089375000000004, 0.13695833333333332, 0.13489791666666676, 0.13490833333333338, 0.13672708333333342, 0.13357291666666657, 0.13198333333333329, 0.13258749999999994, 0.13149375, 0.13007708333333337, 0.13306458333333337, 0.15630208333333345, 0.16338333333333327, 0.15539791666666655, 0.14913958333333335, 0.1436854166666666, 0.1386458333333334, 0.13512083333333336, 0.13078958333333326, 0.1268604166666666, 0.12399791666666672, 0.1319104166666666, 0.1348979166666666, 0.14232708333333335, 0.14625416666666674, 0.1523124999999999, 0.15066250000000006, 0.15137291666666666, 0.1609479166666667, 0.16268541666666667, 0.16116041666666678, 0.1588104166666667, 0.15392083333333326, 0.15152916666666658, 0.15128125000000012, 0.15787083333333338, 0.17213958333333343, 0.16582083333333344, 0.17527916666666668, 0.1936166666666667, 0.20154375000000002, 0.2085229166666667, 0.2001729166666667, 0.1972583333333333, 0.20116875, 0.19438750000000005, 0.1904520833333334, 0.1934083333333333, 0.19178750000000008, 0.18832708333333337, 0.18467083333333326, 0.18848124999999996, 0.19210208333333334, 0.18805000000000005, 0.18361874999999994, 0.18062916666666665, 0.18151875000000006, 0.1831833333333334, 0.18100833333333333, 0.17716666666666667, 0.17428333333333335, 0.17225000000000001, 0.17061458333333326, 0.17637916666666664, 0.17422083333333327, 0.17237708333333332, 0.1738812499999999, 0.17158124999999994, 0.16940000000000008, 0.1687916666666667, 0.1686229166666667, 0.17211666666666658, 0.17469999999999988, 0.17418958333333326, 0.17261666666666672, 0.1723625000000001, 0.16921666666666668, 0.16791458333333345, 0.15962499999999988, 0.1535854166666666, 0.15082708333333336, 0.14939583333333334, 0.15224791666666668, 0.15764166666666682, 0.16293958333333328, 0.1674104166666666, 0.16793333333333335, 0.16625208333333344, 0.1633875000000001, 0.16267499999999996, 0.15848333333333334, 0.15122291666666668, 0.13798333333333335, 0.1242104166666666, 0.11385833333333338, 0.09385208333333335, 0.06844375000000001, 0.06725416666666668, 0.06733958333333336, 0.06727916666666674, 0.06922916666666667, 0.06996250000000001, 0.07114166666666671, 0.07109583333333332, 0.0702479166666667, 0.0678791666666667, 0.0679916666666667, 0.06701250000000002, 0.06525208333333335, 0.06448333333333338, 0.06537291666666667, 0.06606041666666669, 0.06603333333333337, 0.06645000000000006, 0.06775833333333338, 0.06885208333333338, 0.06737708333333335, 0.0652604166666667, 0.06400833333333333, 0.06394166666666669, 0.06332916666666667, 0.062308333333333354, 0.062455102040816335, 0.06335744680851067, 0.06455833333333331, 0.06104166666666663, 0.056720833333333304, 0.055141666666666644, 0.05475833333333328, 0.052506249999999983, 0.05199166666666668, 0.05252291666666667, 0.05377499999999999, 0.05442916666666665, 0.05412291666666663, 0.05431249999999999, 0.054997916666666646, 0.055574999999999986, 0.05674374999999998, 0.05807083333333332, 0.05796041666666668, 0.05689999999999998, 0.05594791666666665, 0.05557499999999999, 0.055802083333333315, 0.05513333333333329, 0.05513333333333331, 0.05641875000000002, 0.057058333333333294, 0.05696458333333331, 0.05554166666666668, 0.055441666666666646]

vwc_wm=[0.039874791666666666, 0.038564583333333353, 0.037671250000000024, 0.03886541666666666, 0.03753104166666665, 0.036461249999999966, 0.03664708333333331, 0.03695708333333331, 0.037486250000000006, 0.03799979166666669, 0.03734645833333331, 0.03497625000000001, 0.033563125000000006, 0.03301479166666666, 0.03240625, 0.033781666666666675, 0.03520729166666663, 0.03428770833333333, 0.03322729166666667, 0.03282812500000001, 0.032185625, 0.031521249999999994, 0.03212249999999999, 0.03328854166666666, 0.03589333333333331, 0.03824708333333333, 0.04018374999999999, 0.03825500000000002, 0.03657416666666665, 0.03367937499999999, 0.033554791666666674, 0.03382854166666666, 0.03380145833333335, 0.033120625, 0.03290062500000002, 0.034409791666666655, 0.03497645833333333, 0.034984375, 0.034436874999999985, 0.034191666666666676, 0.033350833333333336, 0.033315416666666674, 0.032679375, 0.03254729166666665, 0.03273187500000001, 0.03305708333333335, 0.032705833333333344, 0.03284708333333334, 0.03258250000000001, 0.032423750000000015, 0.03291875000000001, 0.03389916666666667, 0.0331025, 0.03214145833333332, 0.03257375, 0.0324775, 0.03279291666666667, 0.032775000000000006, 0.03149500000000001, 0.03146874999999999, 0.03228979166666666, 0.03352708333333333, 0.03463250000000002, 0.03371312500000002, 0.035506041666666675, 0.036531666666666664, 0.03668208333333334, 0.03665666666666665, 0.0361689583333333, 0.03578812499999999, 0.03587604166666664, 0.03726479166666668, 0.03954583333333333, 0.04065104166666666, 0.04226729166666667, 0.040263750000000015, 0.03873229166666669, 0.037787291666666674, 0.03668229166666665, 0.03767250000000002, 0.03775145833333332, 0.03952104166666669, 0.038457916666666696, 0.038306875000000025, 0.03730875000000002, 0.03881208333333334, 0.03956208333333333, 0.04093333333333333, 0.042090833333333334, 0.042833125, 0.04524645833333335, 0.05246645833333338, 0.0528904166666667, 0.05016791666666668, 0.06464374999999999, 0.06427291666666667, 0.06381456521739133, 0.06441145833333337, 0.06402499999999998, 0.06289500000000002, 0.056416875, 0.05647812500000001, 0.055576666666666656, 0.05718291666666663, 0.05739729166666668, 0.05761125000000003, 0.057857500000000034, 0.058157708333333315, 0.05619562499999999, 0.05611541666666667, 0.05958020833333333, 0.060251041666666665, 0.06050145833333332, 0.06056416666666666, 0.06217875000000001, 0.08553625000000002, 0.08899166666666665, 0.07995958333333335, 0.08560666666666666, 0.08053312499999998, 0.07819187499999992, 0.07827958333333329, 0.07881958333333335, 0.07847374999999995, 0.07847416666666664, 0.08314895833333334, 0.09689125, 0.09239270833333342, 0.08914979166666669, 0.08794854166666675, 0.08911562500000003, 0.09193291666666668, 0.0932520833333333, 0.09512437500000002, 0.10481791666666668, 0.14688416666666668, 0.19740833333333332, 0.20834854166666664, 0.21271375, 0.21912895833333337, 0.2319979166666667, 0.23528520833333325, 0.25628291666666664, 0.267276875, 0.27888020833333343, 0.2954764583333334, 0.29325895833333315, 0.2882285416666666, 0.28778708333333325, 0.2860293750000001, 0.2728979166666667, 0.2622300000000002, 0.25310000000000005, 0.23864312500000004, 0.23449, 0.23212083333333336, 0.22532645833333345, 0.21913833333333332, 0.21408479166666675, 0.21162812500000017, 0.20997479166666688, 0.21063750000000017, 0.21038125000000016, 0.21031104166666678, 0.20941791666666668, 0.2056364583333334, 0.20091625000000002, 0.20103464285714281, -999, -999, 0.23158750000000003, 0.23023333333333332, 0.22640625, 0.22569999999999998, 0.2250833333333333, 0.22335625000000003, 0.21988125, 0.21555833333333338, 0.21553749999999997, 0.24142499999999992, 0.26625833333333343, 0.27361875, 0.26491666666666663, 0.2551791666666667, 0.26445625000000006, 0.26574375, 0.2696104166666667, 0.26728124999999997, 0.2666895833333333, 0.2543958333333333, 0.2500354166666667, 0.2501562500000001, 0.2566583333333334, 0.27087916666666667, 0.2731687500000001, 0.27586666666666665, 0.27664375, 0.2770333333333333, 0.2794687499999999, 0.28196250000000006, 0.28315416666666654, 0.28537083333333335, 0.28645625, 0.28167291666666666, 0.27979374999999995, 0.28538125000000003, 0.28654999999999997, 0.28798541666666655, 0.2884333333333334, 0.28914999999999996, 0.29055625, 0.2838000000000001, 0.28008333333333324, 0.2748791666666666, 0.27259583333333337, 0.28395000000000004, 0.28434583333333335, 0.2867854166666666, 0.28589374999999995, 0.2882145833333332, 0.2912395833333333, 0.28754583333333333, 0.28561874999999987, 0.2890687500000001, 0.29024791666666666, 0.2901687499999999, 0.2924208333333334, 0.29419166666666674, 0.29461875000000004, 0.28799791666666663, 0.28051874999999993, 0.27691250000000006, 0.27275625, 0.27447083333333333, 0.28716250000000004, 0.2875520833333333, 0.2886854166666666, 0.2894770833333333, 0.2901229166666668, 0.29071041666666664, 0.29216666666666663, 0.2933854166666668, 0.2942166666666667, 0.2947687499999999, 0.29571250000000016, 0.2967125000000002, 0.29814166666666664, 0.2990833333333335, 0.29990000000000017, 0.30061875000000005, 0.3010416666666668, 0.30132708333333347, 0.30234999999999995, 0.3022729166666666, 0.30148541666666673, 0.30018958333333357, 0.29952708333333344, 0.2985583333333334, 0.29806041666666655, 0.2987708333333332, 0.29877708333333325, 0.29788958333333343, 0.29815208333333326, 0.2987541666666667, 0.29886250000000014, 0.29787500000000017, 0.29799791666666675, 0.2982833333333335, 0.29869166666666663, 0.2990666666666666, 0.299375, 0.2995583333333333, 0.2994166666666667, 0.2988875000000001, 0.29913125000000007, 0.29945000000000005, 0.3000375, 0.30116458333333335, 0.30197291666666687, 0.30153958333333347, 0.3012437500000001, 0.30103333333333343, 0.3013416666666668, 0.30172916666666655, 0.3019833333333333, 0.3020916666666668, 0.3024250000000001, 0.30262500000000003, 0.3027999999999999, 0.3037249999999999, 0.3042000000000001, 0.3060041666666666, 0.3075354166666665, 0.3079416666666665, 0.30867916666666645, 0.30901458333333326, 0.3089041666666666, 0.30888749999999987, 0.3086229166666664, 0.30887083333333337, 0.3087083333333332, 0.3087083333333331, 0.30944166666666667, 0.3089625, 0.29830208333333347, 0.28550833333333325, 0.26914375000000007, 0.25476458333333346, 0.23194374999999998, 0.17525208333333334, 0.1460791666666667, 0.12379375000000002, 0.10521874999999999, 0.10257291666666662, 0.09880624999999998, 0.09715000000000006, 0.09474375000000002, 0.09454166666666673, 0.09341250000000002, 0.09384583333333339, 0.09420000000000006, 0.09175208333333335, 0.09015833333333334, 0.09159374999999999, 0.09260625000000004, 0.09448125000000002, 0.09548333333333332, 0.09671249999999999, 0.09792500000000003, 0.09900624999999998, 0.09945833333333333, 0.09958333333333334, 0.09897291666666669, 0.09336249999999997, 0.08986250000000001, 0.08943673469387754, 0.09155106382978725, 0.0934916666666667, 0.09419166666666672, 0.09101458333333336, 0.08582708333333332, 0.08267083333333329, 0.07577916666666669, 0.0738583333333333, 0.0746250000000001, 0.07560833333333336, 0.07602708333333329, 0.07514166666666673, 0.07560624999999993, 0.07633333333333339, 0.07641666666666676, 0.07733958333333327, 0.07836250000000003, 0.07890624999999997, 0.07813333333333326, 0.07718333333333342, 0.07662500000000008, 0.07720208333333328, 0.07657083333333327, 0.07609791666666661, 0.07739583333333334, 0.07841041666666658, 0.07869166666666667, 0.07673333333333333, 0.07635833333333342]



#take out -999 values from soil moisture
for x in vwc_dm:
    if x<0.0:
        vwc_dm[vwc_dm.index(x)]=np.nan

for x in vwc_mm:
    if x<0.0:
        vwc_mm[vwc_mm.index(x)]=np.nan

for x in vwc_wm:
    if x<0.0:
        vwc_wm[vwc_wm.index(x)]=np.nan



##Leaf Nitrogen Content 

#-----below lines of code correspond to generating a model of daily leaf N content-----#
fig1,axA = plt.subplots(figsize=(30,15))

days=[152,152,152,152,152,152,213,213,213,213,213,213,266,266,266,266,266,266]
#
##leaf N
#dm_june1= np.random.normal(2.95,np.sqrt(3)*0.24,3).tolist()+np.random.normal(2.87, np.sqrt(3)*0.23,3).tolist()
#dm_aug1=np.random.normal(3.38,np.sqrt(3)*0.79,3).tolist()+np.random.normal(1.51, np.sqrt(3)*0.33,3).tolist()
#dm_sep23=np.random.normal(0.62,np.sqrt(3)*0.27,3).tolist()+np.random.normal(0.82, np.sqrt(3)*0.2,3).tolist()
#
#mm_june1= np.random.normal(4.41,np.sqrt(3)*1.6,3).tolist()+np.random.normal(4.56, np.sqrt(3)*0.47,3).tolist()
#mm_aug1=np.random.normal(6.46,np.sqrt(3)*0.81,3).tolist()+np.random.normal(3.48, np.sqrt(3)*0.82,3).tolist()
#mm_sep23=np.random.normal(0.92,np.sqrt(3)*0.41,3).tolist()+np.random.normal(0.29, np.sqrt(3)*0.15,3).tolist()
#
#wm_june1= np.random.normal(5.85,np.sqrt(3)*0.97,3).tolist()+np.random.normal(2.53, np.sqrt(3)*0.21,3).tolist()
#wm_aug1=np.random.normal(8.64,np.sqrt(3)*0.72,3).tolist()+np.random.normal(3.8, np.sqrt(3)*0.53,3).tolist()
#wm_sep23=np.random.normal(3.92,np.sqrt(3)*1.6,3).tolist()+np.random.normal(0.93, np.sqrt(3)*0.93,3).tolist()
#
#
days=[152,213,266]

#interspecific variation

dm_june1_min= [np.mean([2.68,2.76])]
dm_aug1_min=[np.mean([2.62,1.14])]
dm_sep23_min=[np.mean([0.5,0.61])]

mm_june1_min= [np.mean([3.0,4.2])]
mm_aug1_min=[np.mean([5.7,2.7])]
mm_sep23_min=[np.mean([0.5,0.2])]

wm_june1_min= [np.mean([2.27,5.0])]
wm_aug1_min=[np.mean([3.3,8.0])]
wm_sep23_min=[np.mean([0,2.28])]

dm_june1_max= [np.mean([3.24,3.12])]
dm_aug1_max=[np.mean([4.18,1.86])]
dm_sep23_max=[np.mean([0.99,0.9])]

mm_june1_max= [np.mean([6.0,5.0])]
mm_aug1_max=[np.mean([7.3,4.3])]
mm_sep23_max=[np.mean([1.3,0.4])]

wm_june1_max= [np.mean([6.8,2.73])]
wm_aug1_max=[np.mean([9.39,4.3])]
wm_sep23_max=[np.mean([5.5,1.85])]



#axA.scatter(days, mm_june1_min+mm_aug1_min+mm_sep23_min,color='cyan')
#axA.plot(np.unique(days), np.poly1d(np.polyfit(days, mm_june1_min+mm_aug1_min+mm_sep23_min, 2))(np.unique(days)),color="black")
#print np.polyfit(days, wm_june1_min+wm_aug1_min+wm_sep23_min, 2)
#
#axA.scatter(days, dm_june1_max+dm_aug1_max+dm_sep23_max)
#axA.plot(np.unique(days), np.poly1d(np.polyfit(days, dm_june1_max+dm_aug1_max+dm_sep23_max, 2))(np.unique(days)),color="black")
#
###---------#


#Leaf Nitrogen for the dry meadow, moist meadow, wet meadow
days_2=np.linspace(1,365,365)

#interspecific variation
na_dm_min_inter=(days_2**2*(-0.0000985))+(0.0221836353*days_2)+1.62393443

na_mm_min_inter=(days_2**2*(-0.0007235))+(0.2739*days_2)-21.3187

na_wm_min_inter=(days_2**2*(-0.00103620286))+(0.411246832*days_2)-34.9340875

na_dm_max_inter=(days_2**3*(-0.0000006245))+(days_2**2*(0.0000736))+(0.0335*days_2)-1.42

na_mm_max_inter=(days_2**2*(-0.000862))+(0.3197*days_2)-23.17

na_wm_max_inter=(days_2**2*(-0.000823769135))+(0.334774095*days_2)-27.0883003

na_dm_min_inter=na_dm_max_inter-1.14

#intraspecific variation
na_dm_min_intra=(days_2**2*(0.00015217))-(0.08874*days_2)+13.4976

na_wm_min_intra=(days_2**2*(-0.00063026))+(0.24529*days_2)-20.653

na_dm_max_intra=(days_2**2*(-0.000472268))+(0.183197*days_2)-14.5947

na_wm_max_intra=(days_2**2*(-0.000702798986))+(0.286358*days_2)-22.6089


#plt.plot(days_2,na_dm_min_inter)
#plt.plot(days_2,na_dm_max_inter)

#EXTENDED SUMMER INPUTS


#Extended Summer Leaf Nitrogen Content

##dry meadow
#na_dm_dy=np.array(na_dm[:])*1.3
#
##moist meadow
#na_mm_dy=np.array(na_mm[:])*1.3
#
##wet meadow
#na_wm_dy=np.array(na_wm[:])*1.3




#Extended Summer VWC

#dry meadow
vwc_dm_dy=vwc_dm[:]
vwc_dm_dy[0:214]=np.array(vwc_dm[30:(30+214)])
vwc_dm_dy[165:258]=np.array(vwc_dm_dy[165:258])*0.9

#moist meadow
vwc_mm_dy=vwc_mm[:]
vwc_mm_dy[0:214]=np.array(vwc_mm[30:(30+214)])
vwc_mm_dy[165:258]=np.array(vwc_mm_dy[165:258])*0.9

#wet meadow
vwc_wm_dy=vwc_wm[:]
vwc_wm_dy[0:214]=np.array(vwc_wm[30:(30+214)])
vwc_wm_dy[165:258]=np.array(vwc_wm_dy[165:258])*0.9


#Extended Summer Temperature (2012)

#max air temp in dry year 2012

maxairtemp_dy=[-4.847,0.607,0.418,3.446,5.069,-3.219,-5.457,-6.826,8.08,-1.382,-9,-12.35,-10.77,-3.498,-2.747,-6.737,-16.54,
-8.22,-2.055,-4.912,-0.062,-7.34,-3.428,-2.551,-2.058,-4.732,-8.55,-12.4,-4.505,-3.358,-5.784,-3.768,-4.59,-10.07,-0.12,0.109,
-8.53,-6.367,-6.858,-8.34,-7.47,-1.458,-1.627,-6.379,-6.842,-6.162,-9.08,-6.775,-7.93,-2.397,-13.3,-8.79,-4.737,-5.868,-7.7,
-0.164,-11.1,-0.441,-2.501,-7.14,-10.1,-12.72,-10.58,-3.662,-0.708,3.304,-1.009,1.136,4.238,6.025,-0.359,1.825,2.957,4.958,
5.476,4.875,9.37,5.151,-8.69,-4.852,3.922,7.16,10.33,8.89,11.31,8.17,4.936,8.02,4.594,6.527,12.3,12.08,1.898,-0.315,8.62,
6.871,5.483,2.655,7.07,8.58,11.06,10.16,0.892,-0.098,0.251,-3.707,-3.542,2.267,3.439,0.212,0.396,7.04,10.16,12.66,11.65,
12.27,11.42,0.292,1.156,3.94,6.167,5.387,8.08,11.33,14.36,12.67,1.36,3.793,8.59,12.17,13.85,2.612,7.85,7.46,11.54,10.88,
10.91,10.05,11.98,4.88,7.74,13.46,15.45,9.81,1.296,7.01,15.1,4.954,5.947,11.55,11.11,12.67,12.7,15.37,16.17,17.68,15.49,
14.63,15.39,18.49,18.33,9.73,12.17,14.09,18.03,15.44,15.66,14.39,18.07,19.16,19.72,12.82,18.5,21.43,22.59,22.13,22.5,20.51,18.79,
19.03,19.99,21.01,21.2,20.38,19.26,18.26,18.6,13.17,10.99,12.42,12.37,14.44,15.26,17.98,17.97,17.65,17.35,16.59,17.31,17.75,
20.1,20.12,19.79,17.89,18.39,17.33,15.69,17.46,16.52,18.01,16.42,15.8,17.87,16.88,17.34,16.71,16.05,19.65,19.39,17.86,18.63,
19.89,17.57,15.38,14.4,13.53,17.47,17.23,18.07,17.86,12.92,17.11,13.96,16.44,14.49,10.95,16.18,16.37,19.06,19.16,19,19.16,13.62,
17.61,17.25,18.37,14.26,15.81,16.13,17.23,10.21,13.67,16.28,16.26,14.72,5.943,9.79,11.97,15.44,14.78,8.82,12.1,14.41,14.34,
14.31,15.23,15.67,12.44,7.33,5.452,5.061,9.54,9.39,8.85,9.25,12.46,11.54,8.07,3.021,-1.955,1.063,6.505,6.838,9.5,12.28,10.6,
0.779,0.983,5.901,5.547,-4.85,0.043,5.42,9.24,10.49,10.02,8.02,6.316,-6.693,-8.94,-6.908,-1.23,3.346,3.555,6.076,4.256,1.668,1.616,
0.624,1.687,4.522,6.318,6.953,5.462,-1.326,-15.12,-6.806,-6.532,-1.998,-1.576,2.914,1.096,-2.737,-0.445,3.913,3.647,
-0.893,0.397,1.112,0.468,-3.924,-0.946,-0.313,0.912,2.628,0.598,4.646,-1.587,np.nan,-0.702,-2.763,-5.924,-8.89,-14.85,-15.65,
-10.66,-3.623,-2.723,-1.069,-8.23,-11.76,-9.17,-6.991,-13.06,-8.65,-4.13,-2.369,-6.184,-6.219,-10.65,-6.274,-13.61,-15.84,-3.184,
-4.861,-8.14]

#min air temperature in dry year 2012

minairtemp_dy=[-13.04,-6.243,-7.23,-6.857,-3.518,-7.73,-17.22,-18.02,-8.78,-9.43,-22.27,-22.33,-16.74,-11.49,-7.74,-22.44,
-23.56,-16.94,-8.69,-8.63,-8.83,-15.72,-13.92,-13.79,-13.69,-10.4,-18.21,-18.54,-13.62,-9.51,-11.67,-12.46,-12.81,-15.35,
-21,-18.98,-17.08,-19.91,-12.96,-13.53,-13.65,-9.38,-9.38,-11.8,-11.8,-14.05,-12.8,-14.83,-15.38,-14.73,-18.68,-15.95,-9.25,
-19.1,-19,-17.03,-19.64,-12.07,-15.49,-16.55,-17.22,-21,-21.26,-11.27,-6.21,-4.428,-11.54,-15.79,-11.15,-7.41,-6.287,-5.925,
-3.646,-3.44,-3.615,-1.156,-0.818,-13.05,-15.23,-15.56,-9.55,-6.902,-1.703,-2.121,-2.213,-5.494,-6.269,-2.19,-4.419,-2.721,
0.56,1.267,-8.34,-9.36,-6.56,-3.249,-11.13,-12.05,-4.473,-2.347,-0.182,-1.205,-7.7,-8.95,-7.43,-8.88,-10.41,-6.227,-3.109,
-5.764,-6.326,-2.643,0.366,1.524,4.896,2.269,-0.04,-11.33,-12.52,-7.05,-3.957,0.033,-0.631,0.903,3.222,-4.001,-4.856,-7.93,
-9.99,-4.219,0.11,-3.3,-4.213,-5.673,-5.901,-0.241,-0.279,0.267,0.749,-2.326,-2.121,1.964,6.326,-3.522,-5.707,-2.882,-1.173,
-3.951,-5.069,-2.09,2.184,1.754,3.811,3.271,6.574,6.471,3.97,5.889,3.833,3.666,9.18,-0.682,-1.968,2.241,5.697,5.583,4.391,1.047,
7.91,10.07,7.4,2.43,0.114,10.56,12.02,8.76,8.7,12.32,8.63,7.57,8,7.9,8.53,8.26,7.64,8.4,7.94,3.867,5.746,5.569,4.747,4.675,
6.461,7.52,6.657,8.59,9.37,6.492,6.64,7.49,9.77,10.14,9.61,6.834,6.795,6.997,7.06,6.291,6.315,8.62,7.59,7.82,8.05,7.78,7.25,
5.191,3.074,6.155,7.77,7.2,6.116,5.348,9.47,5.316,4.768,4.763,6.565,4.72,4.724,7.51,2.901,2.708,4.126,4.526,6.623,6.399,5.951,
5.846,6.119,7.51,8.84,9.23,6.693,6.461,8.32,6.584,5.418,7.37,2.666,6.849,0.571,-0.239,2.733,7.28,4.332,0.731,-2.784,-0.507,4.716,
2.894,0.41,2.652,4.511,2.823,2.49,1.033,3.29,2.21,0.033,-1.156,-2.182,-0.887,1.133,1.258,-0.401,2.721,1.11,-0.806,-8,-9.22,-10.52,
-3.682,-0.623,0.535,0.983,-4.513,-5.075,-3.049,-0.792,-6.238,-10.61,-9.51,-2.704,1.016,1.341,0.689,0.163,-11.52,-13.61,-15.55,
-12.1,-7.64,-2.658,-2.266,-1.966,-0.257,-4.447,-4.006,-3.331,-3.661,-2.535,0.271,-0.92,-1.791,-15.42,-19.6,-19.4,-10.16,-7.62,
-6.987,-5.89,-5.418,-5.155,-6.383,-4.397,-2.322,-6.739,-6.834,-4.14,-6.409,-9.72,-6.097,-4.693,-4.645,-5.838,-4.204,-2.685,-8.2,
np.nan,-4.535,-7.665,-9.88,-18.75,-22.89,-17.1,-17.82,-11.95,-8.52,-8.62,-12.86,-15.14,-14.32,-14.63,-23.52,-23.55,-9.63,-7.153,
-10.85,-13.62,-19.07,-14.34,-18.99,-20.21,-17.38,-16.11,-18.5]



#surface temp dry meadow in dry year
surtemp_dm_dy=np.array(maxairtemp_dy[0:-1])+2.5

#surface temp moist meadow in dry year
surtemp_mm_dy=np.array(maxairtemp_dy[0:-1])

#surface temp wet meadow in dry year
surtemp_wm_dy=np.array(maxairtemp_dy[0:-1])-2.5




#------The following lines of code smooth model input data-------#


#smooth temp data


#AVERAGE FOR ALL MEADOWS

x = days_2
y= maxairtemp

for i in range(len(y)):
    if math.isnan(y[i]):
        y[i]=np.mean([y[i-1],y[i+1]])

xx = np.linspace(x.min(),x.max(), 365)

# interpolate + smooth
itp = interp1d(x,y, kind='linear')
window_size, poly_order = 101, 2
yy_sg = savgol_filter(itp(xx), window_size, poly_order)

#fig, ax = plt.subplots(figsize=(7, 4))
#ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
#ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
#plt.legend(loc='best')

maxairtemp_smooth=yy_sg



x = days_2
y= maxairtemp_dy[:-1]

for i in range(len(y)):
    if math.isnan(y[i]):
        y[i]=np.mean([y[i-1],y[i+1]])

xx = np.linspace(x.min(),x.max(), 365)

# interpolate + smooth
itp = interp1d(x,y, kind='linear')
window_size, poly_order = 101, 2
yy_sg = savgol_filter(itp(xx), window_size, poly_order)

#fig, ax = plt.subplots(figsize=(7, 4))
#ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
#ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
#plt.legend(loc='best')

maxairtemp_dy_smooth=yy_sg


#smooth vwc data


data = np.array([vwc_dm,vwc_mm,vwc_wm])
vwc_average=np.average(data, axis=0)

x = days_2
y= vwc_average

for i in range(len(y)):
    if math.isnan(y[i]):
        y[i]=np.mean([y[i-2],y[i+2]])

xx = np.linspace(x.min(),x.max(), 365)

# interpolate + smooth
itp = interp1d(x,y, kind='linear')
window_size, poly_order = 101, 5
yy_sg = savgol_filter(itp(xx), window_size, poly_order)

#fig, ax = plt.subplots(figsize=(7, 4))
#ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
#ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
#plt.legend(loc='best')

vwc_smooth=yy_sg


data = np.array([vwc_dm_dy,vwc_mm_dy,vwc_wm_dy])
vwc_average_dy=np.average(data, axis=0)

x = days_2
y= vwc_average_dy

for i in range(len(y)):
    if math.isnan(y[i]):
        y[i]=np.mean([y[i-2],y[i+2]])

xx = np.linspace(x.min(),x.max(), 365)

# interpolate + smooth
itp = interp1d(x,y, kind='linear')
window_size, poly_order = 101, 5
yy_sg = savgol_filter(itp(xx), window_size, poly_order)

#fig, ax = plt.subplots(figsize=(7, 4))
#ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
#ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
#plt.legend(loc='best')

vwc_dy_smooth=yy_sg



#smooth na data

#data = np.array([na_dm.tolist(),na_mm.tolist(),na_wm.tolist()])
#na_average=np.average(data, axis=0)
#
#x = days_2
#y= na_average
#
#for i in range(len(y)):
#    if math.isnan(y[i]):
#        y[i]=np.mean([y[i-1],y[i+1]])
#
#xx = np.linspace(x.min(),x.max(), 365)
#
## interpolate + smooth
#itp = interp1d(x,y, kind='linear')
#window_size, poly_order = 101, 2
#yy_sg = savgol_filter(itp(xx), window_size, poly_order)
#
##fig, ax = plt.subplots(figsize=(7, 4))
##ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
##ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
##plt.legend(loc='best')
#
#na_smooth=yy_sg
#
#
#data = np.array([na_dm_dy.tolist(),na_mm_dy.tolist(),na_wm_dy.tolist()])
#na_average_dy=np.average(data, axis=0)
#
#x = days_2
#y= na_average_dy
#
#for i in range(len(y)):
#    if math.isnan(y[i]):
#        y[i]=np.mean([y[i-1],y[i+1]])
#
#xx = np.linspace(x.min(),x.max(), 365)
#
## interpolate + smooth
#itp = interp1d(x,y, kind='linear')
#window_size, poly_order = 101, 2
#yy_sg = savgol_filter(itp(xx), window_size, poly_order)
#
##fig, ax = plt.subplots(figsize=(7, 4))
##ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
##ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
##plt.legend(loc='best')
#
#na_dy_smooth=yy_sg


#--------------Parameter Inputs By Meadow-----------------------#


#-------smooth temp data



#dry meadow temp
x = days_2
y= surtemp_dm

for i in range(len(y)):
    if math.isnan(y[i]):
        y[i]=np.mean([y[i-1],y[i+1]])

xx = np.linspace(x.min(),x.max(), 365)

# interpolate + smooth
itp = interp1d(x,y, kind='linear')
window_size, poly_order = 101, 2
yy_sg = savgol_filter(itp(xx), window_size, poly_order)

#fig, ax = plt.subplots(figsize=(7, 4))
#ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
#ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
#plt.legend(loc='best')

surtemp_dm_smooth=yy_sg



x = days_2
y= surtemp_dm_dy

for i in range(len(y)):
    if math.isnan(y[i]):
        y[i]=np.mean([y[i-1],y[i+1]])

xx = np.linspace(x.min(),x.max(), 365)

# interpolate + smooth
itp = interp1d(x,y, kind='linear')
window_size, poly_order = 101, 2
yy_sg = savgol_filter(itp(xx), window_size, poly_order)

#fig, ax = plt.subplots(figsize=(7, 4))
#ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
#ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
#plt.legend(loc='best')

surtemp_dm_dy_smooth=yy_sg

#moist meadow temp
x = days_2
y= surtemp_mm

for i in range(len(y)):
    if math.isnan(y[i]):
        y[i]=np.mean([y[i-1],y[i+1]])

xx = np.linspace(x.min(),x.max(), 365)

# interpolate + smooth
itp = interp1d(x,y, kind='linear')
window_size, poly_order = 101, 2
yy_sg = savgol_filter(itp(xx), window_size, poly_order)

#fig, ax = plt.subplots(figsize=(7, 4))
#ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
#ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
#plt.legend(loc='best')

surtemp_mm_smooth=yy_sg



x = days_2
y= surtemp_mm_dy

for i in range(len(y)):
    if math.isnan(y[i]):
        y[i]=np.mean([y[i-1],y[i+1]])

xx = np.linspace(x.min(),x.max(), 365)

# interpolate + smooth
itp = interp1d(x,y, kind='linear')
window_size, poly_order = 101, 2
yy_sg = savgol_filter(itp(xx), window_size, poly_order)

#fig, ax = plt.subplots(figsize=(7, 4))
#ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
#ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
#plt.legend(loc='best')

surtemp_mm_dy_smooth=yy_sg

#wet meadow temp
x = days_2
y= surtemp_wm

for i in range(len(y)):
    if math.isnan(y[i]):
        y[i]=np.mean([y[i-1],y[i+1]])

xx = np.linspace(x.min(),x.max(), 365)

# interpolate + smooth
itp = interp1d(x,y, kind='linear')
window_size, poly_order = 101, 2
yy_sg = savgol_filter(itp(xx), window_size, poly_order)

#fig, ax = plt.subplots(figsize=(7, 4))
#ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
#ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
#plt.legend(loc='best')

surtemp_wm_smooth=yy_sg



x = days_2
y= surtemp_wm_dy

for i in range(len(y)):
    if math.isnan(y[i]):
        y[i]=np.mean([y[i-1],y[i+1]])

xx = np.linspace(x.min(),x.max(), 365)

# interpolate + smooth
itp = interp1d(x,y, kind='linear')
window_size, poly_order = 101, 2
yy_sg = savgol_filter(itp(xx), window_size, poly_order)

#fig, ax = plt.subplots(figsize=(7, 4))
#ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
#ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
#plt.legend(loc='best')

surtemp_wm_dy_smooth=yy_sg





#-------smooth vwc data

#dry meadow vwc
x = days_2
y= vwc_dm

for i in range(len(y)):
    if math.isnan(y[i]):
        y[i]=np.mean([y[i-2],y[i+2]])

xx = np.linspace(x.min(),x.max(), 365)

# interpolate + smooth
itp = interp1d(x,y, kind='linear')
window_size, poly_order = 31, 5
yy_sg = savgol_filter(itp(xx), window_size, poly_order)

#fig, ax = plt.subplots(figsize=(7, 4))
#ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
#ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
#plt.legend(loc='best')

vwc_dm_smooth=yy_sg



x = days_2
y= vwc_dm_dy

for i in range(len(y)):
    if math.isnan(y[i]):
        y[i]=np.mean([y[i-2],y[i+2]])

xx = np.linspace(x.min(),x.max(), 365)

# interpolate + smooth
itp = interp1d(x,y, kind='linear')
window_size, poly_order = 31, 5
yy_sg = savgol_filter(itp(xx), window_size, poly_order)

#fig, ax = plt.subplots(figsize=(7, 4))
#ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
#ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
#plt.legend(loc='best')

vwc_dm_dy_smooth=yy_sg

#moist meadow vwc
x = days_2
y= vwc_mm

for i in range(len(y)):
    if math.isnan(y[i]):
        y[i]=np.mean([y[i-2],y[i+2]])

xx = np.linspace(x.min(),x.max(), 365)

# interpolate + smooth
itp = interp1d(x,y, kind='linear')
window_size, poly_order = 71, 5
yy_sg = savgol_filter(itp(xx), window_size, poly_order)

#fig, ax = plt.subplots(figsize=(7, 4))
#ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
#ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
#plt.legend(loc='best')

vwc_mm_smooth=yy_sg



x = days_2
y= vwc_mm_dy

for i in range(len(y)):
    if math.isnan(y[i]):
        y[i]=np.mean([y[i-2],y[i+2]])

xx = np.linspace(x.min(),x.max(), 365)

# interpolate + smooth
itp = interp1d(x,y, kind='linear')
window_size, poly_order = 51, 5
yy_sg = savgol_filter(itp(xx), window_size, poly_order)

#fig, ax = plt.subplots(figsize=(7, 4))
#ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
#ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
#plt.legend(loc='best')

vwc_mm_dy_smooth=yy_sg



#wet meadow vwc
x = days_2
y= vwc_wm

for i in range(len(y)):
    if math.isnan(y[i]):
        y[i]=np.mean([y[i-2],y[i+2]])

xx = np.linspace(x.min(),x.max(), 365)

# interpolate + smooth
itp = interp1d(x,y, kind='linear')
window_size, poly_order = 51, 5
yy_sg = savgol_filter(itp(xx), window_size, poly_order)

#fig, ax = plt.subplots(figsize=(7, 4))
#ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
#ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
#plt.legend(loc='best')

vwc_wm_smooth=yy_sg



x = days_2
y= vwc_wm_dy

for i in range(len(y)):
    if math.isnan(y[i]):
        y[i]=np.mean([y[i-2],y[i+2]])

xx = np.linspace(x.min(),x.max(), 365)

# interpolate + smooth
itp = interp1d(x,y, kind='linear')
window_size, poly_order = 31, 5
yy_sg = savgol_filter(itp(xx), window_size, poly_order)

#fig, ax = plt.subplots(figsize=(7, 4))
#ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
#ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
#plt.legend(loc='best')

vwc_wm_dy_smooth=yy_sg





#------smooth na data
#
##dry meadow na
#x = days_2
#y= na_dm
#
#for i in range(len(y)):
#    if math.isnan(y[i]):
#        y[i]=np.mean([y[i-1],y[i+1]])
#
#xx = np.linspace(x.min(),x.max(), 365)
#
## interpolate + smooth
#itp = interp1d(x,y, kind='linear')
#window_size, poly_order = 101, 2
#yy_sg = savgol_filter(itp(xx), window_size, poly_order)
#
##fig, ax = plt.subplots(figsize=(7, 4))
##ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
##ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
##plt.legend(loc='best')
#
#na_dm_smooth=yy_sg
#
#x = days_2
#y= na_dm_intra
#
#for i in range(len(y)):
#    if math.isnan(y[i]):
#        y[i]=np.mean([y[i-1],y[i+1]])
#
#xx = np.linspace(x.min(),x.max(), 365)
#
## interpolate + smooth
#itp = interp1d(x,y, kind='linear')
#window_size, poly_order = 101, 2
#yy_sg = savgol_filter(itp(xx), window_size, poly_order)
#
##fig, ax = plt.subplots(figsize=(7, 4))
##ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
##ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
##plt.legend(loc='best')
#
#na_dm_intra_smooth=na_dm_intra
#
#x = days_2
#y= na_dm_dy
#
#for i in range(len(y)):
#    if math.isnan(y[i]):
#        y[i]=np.mean([y[i-1],y[i+1]])
#
#xx = np.linspace(x.min(),x.max(), 365)
#
## interpolate + smooth
#itp = interp1d(x,y, kind='linear')
#window_size, poly_order = 101, 2
#yy_sg = savgol_filter(itp(xx), window_size, poly_order)
#
##fig, ax = plt.subplots(figsize=(7, 4))
##ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
##ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
##plt.legend(loc='best')
#
#na_dm_dy_smooth=yy_sg
#
##moist meadow na
#x = days_2
#y= na_mm
#
#for i in range(len(y)):
#    if math.isnan(y[i]):
#        y[i]=np.mean([y[i-1],y[i+1]])
#
#xx = np.linspace(x.min(),x.max(), 365)
#
## interpolate + smooth
#itp = interp1d(x,y, kind='linear')
#window_size, poly_order = 101, 2
#yy_sg = savgol_filter(itp(xx), window_size, poly_order)
#
##fig, ax = plt.subplots(figsize=(7, 4))
##ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
##ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
##plt.legend(loc='best')
#
#na_mm_smooth=yy_sg
#
#
#
#x = days_2
#y= na_mm_dy
#
#for i in range(len(y)):
#    if math.isnan(y[i]):
#        y[i]=np.mean([y[i-1],y[i+1]])
#
#xx = np.linspace(x.min(),x.max(), 365)
#
## interpolate + smooth
#itp = interp1d(x,y, kind='linear')
#window_size, poly_order = 101, 2
#yy_sg = savgol_filter(itp(xx), window_size, poly_order)
#
##fig, ax = plt.subplots(figsize=(7, 4))
##ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
##ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
##plt.legend(loc='best')
#
#na_mm_dy_smooth=yy_sg
#
#
#
##wet meadow na
#x = days_2
#y= na_wm
#
#for i in range(len(y)):
#    if math.isnan(y[i]):
#        y[i]=np.mean([y[i-1],y[i+1]])
#
#xx = np.linspace(x.min(),x.max(), 365)
#
## interpolate + smooth
#itp = interp1d(x,y, kind='linear')
#window_size, poly_order = 101, 2
#yy_sg = savgol_filter(itp(xx), window_size, poly_order)
#
##fig, ax = plt.subplots(figsize=(7, 4))
##ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
##ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
##plt.legend(loc='best')
#
#na_wm_smooth=yy_sg
#
#x = days_2
#y= na_wm_intra
#
#for i in range(len(y)):
#    if math.isnan(y[i]):
#        y[i]=np.mean([y[i-1],y[i+1]])
#
#xx = np.linspace(x.min(),x.max(), 365)
#
## interpolate + smooth
#itp = interp1d(x,y, kind='linear')
#window_size, poly_order = 101, 2
#yy_sg = savgol_filter(itp(xx), window_size, poly_order)
#
##fig, ax = plt.subplots(figsize=(7, 4))
##ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
##ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
##plt.legend(loc='best')
#
#na_wm_intra_smooth=na_wm_intra
#
#x = days_2
#y= na_wm_dy
#
#for i in range(len(y)):
#    if math.isnan(y[i]):
#        y[i]=np.mean([y[i-1],y[i+1]])
#
#xx = np.linspace(x.min(),x.max(), 365)
#
## interpolate + smooth
#itp = interp1d(x,y, kind='linear')
#window_size, poly_order = 101, 2
#yy_sg = savgol_filter(itp(xx), window_size, poly_order)
#
##fig, ax = plt.subplots(figsize=(7, 4))
##ax.plot(x, y, 'r.', label= 'Unsmoothed curve')
##ax.plot(xx, yy_sg, 'k', label= "Smoothed curve")
##plt.legend(loc='best')
#
#na_wm_dy_smooth=yy_sg



 #----------------#

na_dm_min_inter_dy=[]
na_dm_min_inter_dy=list(na_dm_min_inter)

na_dm_max_inter_dy=[]
na_dm_max_inter_dy=list(na_dm_max_inter)

na_wm_min_inter_dy=[]
na_wm_min_inter_dy=list(na_wm_min_inter)

na_wm_max_inter_dy=[]
na_wm_max_inter_dy=list(na_wm_max_inter)

#Set leaf nitrogen to zero during winter

#na_dm_smooth[:gs0]=0.0
#na_dm_smooth[gsf:]=0.0
#
#na_mm_smooth[:gs0]=0.0
#na_mm_smooth[gsf:]=0.0
#
#na_wm_smooth[:gs0]=0.0
#na_wm_smooth[gsf:]=0.0
#
#
#na_dm_intra_smooth[:gs0]=0.0
#na_dm_intra_smooth[gsf:]=0.0
#
#
#na_wm_intra_smooth[:gs0]=0.0
#na_wm_intra_smooth[gsf:]=0.0
#
#na_dm_dy_smooth[:gs0]=0.0
#na_dm_dy_smooth[gsf:]=0.0
#
#na_mm_dy_smooth[:gs0]=0.0
#na_mm_dy_smooth[gsf:]=0.0
#
#na_wm_dy_smooth[:gs0]=0.0
#na_wm_dy_smooth[gsf:]=0.0

na_dm_min_inter[:gs0_d]=0.0
na_dm_min_inter[gsf+1:]=0.0

na_dm_max_inter[:gs0_d]=0.0
na_dm_max_inter[gsf+1:]=0.0

na_mm_min_inter[:gs0_m]=0.0
na_mm_min_inter[gsf+1:]=0.0

na_mm_max_inter[:gs0_m]=0.0
na_mm_max_inter[gsf+1:]=0.0

#na_dm_min_intra[:gs0d]=0.0
#na_dm_min_intra[gsfd:]=0.0
#
#
#na_dm_max_intra[:gs0d]=0.0
#na_dm_max_intra[gsfd:]=0.0


na_wm_min_inter[:gs0_w]=0.0
na_wm_min_inter[gsf+1:]=0.0

na_wm_max_inter[:gs0_w]=0.0    
na_wm_max_inter[gsf+1:]=0.0        

#na_wm_min_intra[:gs0w]=0.0
#na_wm_min_intra[gsfw:]=0.0

#na_wm_max_intra[:gs0w]=0.0 
#na_wm_max_intra[gsfw:]=0.0        

##########

na_dm_min_inter_dy=np.array(na_dm_min_inter_dy)
na_dm_max_inter_dy=np.array(na_dm_max_inter_dy)
na_wm_min_inter_dy=np.array(na_wm_min_inter_dy)
na_wm_max_inter_dy=np.array(na_wm_max_inter_dy)



na_dm_min_inter_dy[:gs0_ddy]=0.0
na_dm_min_inter_dy[gsf+1:]=0.0

na_dm_max_inter_dy[:gs0_ddy]=0.0
na_dm_max_inter_dy[gsf+1:]=0.0

na_wm_min_inter_dy[:gs0_wdy]=0.0
na_wm_min_inter_dy[gsf+1:]=0.0

na_wm_max_inter_dy[:gs0_wdy]=0.0   
na_wm_max_inter_dy[gsf+1:]=0.0     
 

for x in range(len(na_wm_min_inter_dy)):
    if na_wm_min_inter_dy[x]<0.0:
        na_wm_min_inter_dy[x]=0.0

#na_dy_smooth[:gs0]=0.0
#na_dy_smooth[gsf:]=0.0
#
#na_smooth[:gs0]=0.0
#na_smooth[gsf:]=0.0





#plots
##
#fig2,axA = plt.subplots(figsize=(30,15))
#axA.set_xlim([0,365])
#axA.set_xlabel('Time (days)',fontsize=28, fontname='Times New Roman')
#axA.set_ylabel('Volumetric Water Content (m3/m3)',fontsize=28, fontname='Times New Roman')
#axA.set_title('Volumetric Water Content in 2012 vs. 2013', fontname='Times New Roman',fontsize=36,fontweight='bold')
#
#
#
#axA.plot(range(len(na_dm_min_inter)),na_dm_min_inter,color='red',linewidth=10.0,alpha=0.5,label="Hot, Dry Year: 2012") 
#axA.plot(range(len(na_dm_max_inter)),na_dm_max_inter,color='blue',linewidth=10.0,alpha=0.5,label="Normal Year: 2013")   
#axA.legend()
##
#   
#
#fig1.savefig('vwc_twoyears.png') 


#determine the temps of the days of the growing season
dm_smooth=gs_smooth(surtemp_dm.tolist(),0,364,poly=2)
wm_smooth=gs_smooth(surtemp_wm.tolist(),0,364,poly=2)
mm_smooth=gs_smooth(surtemp_mm.tolist(),0,364,poly=2)

dm_0_5=[]
dm_6_10=[]
dm_11_15=[]
dm_16_20=[]
dm_21_25=[]

for x in dm_smooth[gs0_d:gsf+1]:
    if x>0 and x<6:
        dm_0_5+=[dm_smooth.index(x)]
    
    elif x>5 and x<11:
        dm_6_10+=[dm_smooth.index(x)]
        
    elif x>10 and x<16:
        dm_11_15+=[dm_smooth.index(x)]

    elif x>15 and x<21:
        dm_16_20+=[dm_smooth.index(x)]
        
    elif x>20 and x<26:
        dm_21_25+=[dm_smooth.index(x)]        

wm_0_5=[]
wm_6_10=[]
wm_11_15=[]
wm_16_20=[]
wm_21_25=[]

for x in wm_smooth[gs0_w:gsf+1]:
    if x>0 and x<6:
        wm_0_5+=[wm_smooth.index(x)]
    
    elif x>5 and x<11:
        wm_6_10+=[wm_smooth.index(x)]
        
    elif x>10 and x<16:
        wm_11_15+=[wm_smooth.index(x)]

    elif x>15 and x<21:
        wm_16_20+=[wm_smooth.index(x)]
        
    elif x>20 and x<26:
        wm_21_25+=[wm_smooth.index(x)] 
        
mm_0_5=[]
mm_6_10=[]
mm_11_15=[]
mm_16_20=[]
mm_21_25=[]

for x in mm_smooth[gs0_m:gsf+1]:
    if x>0 and x<6:
        mm_0_5+=[mm_smooth.index(x)]
    
    elif x>5 and x<11:
        mm_6_10+=[mm_smooth.index(x)]
        
    elif x>10 and x<16:
        mm_11_15+=[mm_smooth.index(x)]

    elif x>15 and x<21:
        mm_16_20+=[mm_smooth.index(x)]
        
    elif x>20 and x<26:
        mm_21_25+=[mm_smooth.index(x)]       
        
        
#fig2,axA = plt.subplots(figsize=(30,15))
#axA.plot(range(len(na_mm_min_inter)),na_mm_min_inter,color='red',linewidth=10.0,alpha=0.5,label="Hot, Dry Year: 2012") 
#axA.plot(range(len(na_mm_max_inter)),na_mm_max_inter,color='blue',linewidth=10.0,alpha=0.5,label="Normal Year: 2013")   
#axA.legend()